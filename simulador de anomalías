// ==UserScript==
// @id             iitc_plugin_anomaly_simulator
// @name           Anomaly Simulator
// @category       Misc
// @version        1.1
// @description    Simula anomalías sin depender de Draw Tools ni Bookmarks
// @author         ShadowVcL
// @downloadURL    https://github.com/ShadowVcL/anomaly-simulator-plus-V1.user.js
// @updateURL      https://your-update-url-here
// @match          *://intel.ingress.com/*
// @match          *://intel-x.ingress.com/*
// @grant          none
// ==/UserScript==

function wrapper(plugin_info) {
  if (typeof window.plugin !== 'function') window.plugin = function () {};

  window.plugin.anomalySimulator = {
    active: false,
    phase: 1,
    zones: [], // {latLngs: LatLng[], polygon: L.Polygon, active: bool, phase: int}
    sites: [], // {id:string, name:string, latLng:L.LatLng, active:bool, phase:int, marker:L.Marker}

    setup: function () {
      // Activar / Desactivar simulación
      $('<a>')
        .text('Anomaly: off')
        .attr('id', 'anomaly-toggle')
        .attr('title', 'Activar / Desactivar simulación de anomalía')
        .click(function () {
          window.plugin.anomalySimulator.active = !window.plugin.anomalySimulator.active;
          $(this).text(window.plugin.anomalySimulator.active ? 'Anomaly: on' : 'Anomaly: off');
          window.plugin.anomalySimulator.refresh();
        })
        .appendTo('#toolbox');

      // Agregar zona manual (como polígono)
      $('<a>')
        .text('Add Manual Zone')
        .attr('title', 'Agregar zona (lat,lng) como polígono')
        .click(function () {
          var raw = prompt('Ingrese coordenadas separadas por punto y coma (lat,lng;lat,lng...):');
          if (!raw) return;

          try {
            var latlngs = raw.split(';').map(pair => {
              var [lat, lng] = pair.split(',').map(Number);
              if (isNaN(lat) || isNaN(lng)) throw new Error();
              return [lat, lng];
            });
            var polygon = L.polygon(latlngs, {
              color: 'red',
              fillColor: '#f03',
              fillOpacity: 0.3,
              weight: 2
            });
            window.plugin.anomalySimulator.zones.push({
              latLngs: latlngs,
              polygon: polygon,
              active: true,
              phase: window.plugin.anomalySimulator.phase
            });
            alert('Zona agregada.');
            window.plugin.anomalySimulator.refresh();
          } catch (e) {
            alert('Error en el formato de coordenadas.');
          }
        })
        .appendTo('#toolbox');

      // Agregar sitio manual
      $('<a>')
        .text('Add Site')
        .attr('title', 'Agregar sitio manual')
        .click(function () {
          var name = prompt('Nombre del sitio:');
          var lat = parseFloat(prompt('Latitud:'));
          var lng = parseFloat(prompt('Longitud:'));
          if (!name || isNaN(lat) || isNaN(lng)) {
            alert('Datos inválidos.');
            return;
          }
          window.plugin.anomalySimulator.sites.push({
            id: 'manual_' + Date.now(),
            name: name,
            latLng: L.latLng(lat, lng),
            active: true,
            phase: window.plugin.anomalySimulator.phase,
            marker: null
          });
          window.plugin.anomalySimulator.refresh();
        })
        .appendTo('#toolbox');

      // Selección de fase
      var $phase = $('<select>')
        .attr('title', 'Fase actual')
        .attr('id', 'anomaly-phase-select')
        .append(
          $('<option>').val(1).text('Fase 1'),
          $('<option>').val(2).text('Fase 2'),
          $('<option>').val(3).text('Fase 3')
        )
        .val(window.plugin.anomalySimulator.phase)
        .change(function () {
          window.plugin.anomalySimulator.phase = parseInt($(this).val());
          window.plugin.anomalySimulator.refresh();
        });

      $('#toolbox').append($('<label>').text('Phase: ')).append($phase);

      // Exportar configuración
      $('<a>')
        .text('Export Config')
        .attr('title', 'Exportar configuración JSON')
        .click(function () {
          var exportData = {
            active: window.plugin.anomalySimulator.active,
            phase: window.plugin.anomalySimulator.phase,
            zones: window.plugin.anomalySimulator.zones.map(z => ({
              latLngs: z.latLngs,
              active: z.active,
              phase: z.phase
            })),
            sites: window.plugin.anomalySimulator.sites.map(s => ({
              id: s.id,
              name: s.name,
              latLng: s.latLng,
              active: s.active,
              phase: s.phase
            }))
          };
          prompt('Copie la configuración JSON:', JSON.stringify(exportData, null, 2));
        })
        .appendTo('#toolbox');

      // Importar configuración
      $('<a>')
        .text('Import Config')
        .attr('title', 'Importar configuración JSON')
        .click(function () {
          var input = prompt('Pegar configuración JSON:');
          if (!input) return;
          try {
            var data = JSON.parse(input);

            // Limpiar capas existentes
            window.plugin.anomalySimulator.zones.forEach(z => {
              if (window.map.hasLayer(z.polygon)) window.map.removeLayer(z.polygon);
            });
            window.plugin.anomalySimulator.sites.forEach(s => {
              if (s.marker) window.map.removeLayer(s.marker);
            });

            // Cargar nuevas
            window.plugin.anomalySimulator.zones = data.zones.map(z => {
              var polygon = L.polygon(z.latLngs, {
                color: 'red',
                fillColor: '#f03',
                fillOpacity: 0.3,
                weight: 2
              });
              return { ...z, polygon };
            });

            window.plugin.anomalySimulator.sites = data.sites.map(s => ({
              ...s,
              latLng: L.latLng(s.latLng.lat, s.latLng.lng),
              marker: null
            }));

            window.plugin.anomalySimulator.phase = data.phase || 1;
            window.plugin.anomalySimulator.active = data.active || false;
            $('#anomaly-toggle').text(window.plugin.anomalySimulator.active ? 'Anomaly: on' : 'Anomaly: off');
            $('#anomaly-phase-select').val(window.plugin.anomalySimulator.phase);
            window.plugin.anomalySimulator.refresh();
          } catch (e) {
            alert('JSON inválido.');
          }
        })
        .appendTo('#toolbox');

      window.addHook('mapDataRefreshEnd', window.plugin.anomalySimulator.refresh);
    },

    refresh: function () {
      // Limpia todo lo visible
      window.plugin.anomalySimulator.zones.forEach(z => {
        if (window.map.hasLayer(z.polygon)) window.map.removeLayer(z.polygon);
      });
      window.plugin.anomalySimulator.sites.forEach(s => {
        if (s.marker) window.map.removeLayer(s.marker);
        s.marker = null;
      });

      if (!window.plugin.anomalySimulator.active) return;

      // Dibuja zonas
      window.plugin.anomalySimulator.zones.forEach(z => {
        if (z.active && z.phase === window.plugin.anomalySimulator.phase) {
          z.polygon.addTo(window.map);
        }
      });

      // Dibuja sitios
      window.plugin.anomalySimulator.sites.forEach(s => {
        if (s.active && s.phase === window.plugin.anomalySimulator.phase) {
          var marker = L.circleMarker(s.latLng, {
            color: 'red',
            fillColor: 'red',
            fillOpacity: 0.9,
            radius: 6
          }).bindPopup(s.name).addTo(window.map);
          s.marker = marker;
        }
      });
    }
  };

  var setup = window.plugin.anomalySimulator.setup;
  setup.info = plugin_info;

  if (window.iitcLoaded) {
    setup();
  } else {
    window.addHook('iitcLoaded', setup);
  }
}

var plugin_info = {};
plugin_info.script = document.currentScript ? document.currentScript.src : '';
plugin_info.version = '1.2';

var script = document.createElement('script');
script.appendChild(document.createTextNode('(' + wrapper + ')(' + JSON.stringify(plugin_info) + ');'));
(document.body || document.head || document.documentElement).appendChild(script);
